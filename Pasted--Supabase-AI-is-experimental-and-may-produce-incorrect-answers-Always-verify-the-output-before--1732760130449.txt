-- Supabase AI is experimental and may produce incorrect answers
-- Always verify the output before executing

-- Drop existing tables if they exist
DROP TABLE IF EXISTS public.user_chat_history CASCADE;

DROP TABLE IF EXISTS public.video_analysis_output CASCADE;

DROP TABLE IF EXISTS public.conversations CASCADE;

DROP TABLE IF EXISTS public.users CASCADE;

-- Create extension for UUID and vector support
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

CREATE EXTENSION IF NOT EXISTS vector;

-- Create users table
CREATE TABLE
  public.users (
    id UUID DEFAULT gen_random_uuid () PRIMARY KEY,
    email TEXT NOT NULL UNIQUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
  );

-- Create conversations table
CREATE TABLE
  public.conversations (
    id UUID DEFAULT gen_random_uuid () PRIMARY KEY,
    user_id UUID NOT NULL,
    title TEXT NOT NULL DEFAULT 'New Conversation',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP WITH TIME ZONE,
    FOREIGN KEY (user_id) REFERENCES public.users (id) ON DELETE CASCADE,
    CHECK (LENGTH(title) > 0)
  );

-- Create user chat history table with conversation support
CREATE TABLE
  public.user_chat_history (
    id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL,
    conversation_id UUID NOT NULL,
    message TEXT NOT NULL,
    chat_type TEXT DEFAULT 'text',
    "TIMESTAMP" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    last_updated TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP WITH TIME ZONE,
    vector vector (384),
    FOREIGN KEY (user_id) REFERENCES public.users (id) ON DELETE CASCADE,
    FOREIGN KEY (conversation_id) REFERENCES public.conversations (id) ON DELETE CASCADE,
    CHECK (LENGTH(message) > 0)
  );

-- Create video analysis output table
CREATE TABLE
  public.video_analysis_output (
    id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL,
    upload_file_name TEXT NOT NULL,
    analysis TEXT NOT NULL,
    video_duration TEXT,
    video_format TEXT,
    "TIMESTAMP" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    last_updated TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP WITH TIME ZONE,
    vector vector (384),
    FOREIGN KEY (user_id) REFERENCES public.users (id) ON DELETE CASCADE,
    CHECK (LENGTH(upload_file_name) > 0)
  );

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS users_email_idx ON public.users (email);

CREATE INDEX IF NOT EXISTS conversations_user_id_idx ON public.conversations (user_id);

CREATE INDEX IF NOT EXISTS user_chat_history_user_id_idx ON public.user_chat_history (user_id);

CREATE INDEX IF NOT EXISTS user_chat_history_conversation_id_idx ON public.user_chat_history (conversation_id);

CREATE INDEX IF NOT EXISTS video_analysis_output_user_id_idx ON public.video_analysis_output (user_id);

-- Function for timestamp updates
CREATE
OR REPLACE FUNCTION update_updated_at () RETURNS TRIGGER AS $$
BEGIN
    NEW.last_updated = CURRENT_TIMESTAMP;
    RETURN NEW;
END; $$ LANGUAGE 'plpgsql';

-- Triggers for updating timestamps
CREATE TRIGGER update_users_updated_at BEFORE
UPDATE ON users FOR EACH ROW
EXECUTE FUNCTION update_updated_at ();

CREATE TRIGGER update_conversations_updated_at BEFORE
UPDATE ON conversations FOR EACH ROW
EXECUTE FUNCTION update_updated_at ();

CREATE TRIGGER update_user_chat_history_updated_at BEFORE
UPDATE ON user_chat_history FOR EACH ROW
EXECUTE FUNCTION update_updated_at ();

CREATE TRIGGER update_video_analysis_output_updated_at BEFORE
UPDATE ON video_analysis_output FOR EACH ROW
EXECUTE FUNCTION update_updated_at ();